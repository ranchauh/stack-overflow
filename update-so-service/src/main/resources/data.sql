DROP TABLE IF EXISTS SO_USER CASCADE;
CREATE TABLE SO_USER(
    USER_ID VARCHAR(50) PRIMARY KEY,
    EMAIL_ID VARCHAR(50) NOT NULL,
    PASSWORD VARCHAR(50) NOT NULL,
    DISPLAY_NAME VARCHAR(100),
    UNIQUE KEY (EMAIL_ID)
);

DROP TABLE IF EXISTS QUESTION CASCADE;
CREATE TABLE QUESTION (
    QUESTION_ID NUMERIC IDENTITY PRIMARY KEY,
    QUESTION_TITLE VARCHAR(1000) NOT NULL,
    QUESTION_DESCRIPTION CLOB,
    VOTE_COUNT NUMERIC,
    TAGS VARCHAR(1000),
    CREATE_TIMESTAMP TIMESTAMP,
    UPDATE_TIMESTAMP TIMESTAMP,
    POSTED_BY VARCHAR(50) NOT NULL,
    FOREIGN KEY (POSTED_BY) REFERENCES SO_USER(USER_ID)
);

DROP TABLE IF EXISTS TAG CASCADE;
CREATE TABLE TAG (
    TAG_NAME VARCHAR(50) PRIMARY KEY,
    TAG_DESCRIPTION VARCHAR(1000),
    CREATE_TIMESTAMP TIMESTAMP,
    UPDATE_TIMESTAMP TIMESTAMP,
    CREATED_BY VARCHAR(50) NOT NULL,
    FOREIGN KEY (CREATED_BY) REFERENCES SO_USER(USER_ID)
);

DROP TABLE IF EXISTS QUESTION_TAG CASCADE;
CREATE TABLE QUESTION_TAG (
    QUESTION_ID NUMERIC,
    TAG_NAME VARCHAR(50),
    CREATE_TIMESTAMP TIMESTAMP,
    UPDATE_TIMESTAMP TIMESTAMP,
    PRIMARY KEY (QUESTION_ID, TAG_NAME)
);

DROP TABLE IF EXISTS ANSWER CASCADE;
CREATE TABLE ANSWER (
    ANSWER_ID NUMERIC IDENTITY PRIMARY KEY,
    ANSWER_TEXT CLOB,
    QUESTION_ID NUMERIC,
    PARENT_ANSWER_ID NUMERIC,
    VOTE_COUNT NUMERIC,
    CREATE_TIMESTAMP TIMESTAMP,
    UPDATE_TIMESTAMP TIMESTAMP,
    POSTED_BY VARCHAR(50) NOT NULL,
    FOREIGN KEY (POSTED_BY) REFERENCES SO_USER(USER_ID),
    FOREIGN KEY (PARENT_ANSWER_ID) REFERENCES ANSWER(ANSWER_ID),
    FOREIGN KEY (QUESTION_ID) REFERENCES QUESTION(QUESTION_ID)
);

DROP TABLE IF EXISTS RICH_CONTENT CASCADE;
CREATE TABLE RICH_CONTENT (
    CONTENT_ID VARCHAR(100) PRIMARY KEY,
    CONTENT_NAME VARCHAR(100) NOT NULL,
    CONTENT_LOCATION VARCHAR(1000) NOT NULL,
    ANSWER_ID NUMERIC NOT NULL,
    CONTENT_TYPE VARCHAR(10) NOT NULL,
    CREATE_TIMESTAMP TIMESTAMP,
    UPDATE_TIMESTAMP TIMESTAMP,
    FOREIGN KEY (ANSWER_ID) REFERENCES ANSWER(ANSWER_ID)
);